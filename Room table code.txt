using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Net.Mime.MediaTypeNames;

namespace SoftwareEngineeringSP
{
    public partial class frmSpeakerForm : Form
    {
        Connection contest = new Connection();
        SqlConnection sqlcon = new SqlConnection();
        SqlCommand cmd = new SqlCommand();
        public frmSpeakerForm()
        {
            InitializeComponent();
            sqlcon = contest.getConnection();
        }

        private void btnHome_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnSubmit_Click(object sender, EventArgs e)
        {
            //we have to pass this data that is submitted to the database 
            sqlcon.Open();
            cmd = new SqlCommand("INSERT INTO Speaker(SPEAKER,OFFICE NUMBER,CURRENT NUMBER,EMAIL,PROFESSION,BIO)values('"+tbxFirstName.Text +" "+ tbxLastName.Text+"','"+mtbxPhonenumber.Text+"','"+mtbxDayOfPhoneNumber.Text+"','"+tbxEmail.Text+"','"+tbxProfession.Text+"','"+tbxBio.Text+"')",sqlcon);
            cmd.ExecuteNonQuery();
            MessageBox.Show("Information succesfully submitted");
            sqlcon.Close();
            this.Close();
        }

        private void btnResetAll_Click(object sender, EventArgs e)
        {
            Action<Control.ControlCollection> func = null;
            func = (controls) =>
            {
                foreach (Control control in controls)
                {
                    if (control is TextBox)
                    {
                        (control as TextBox).Clear();
                        mtbxPhonenumber.Clear();
                        mtbxDayOfPhoneNumber.Clear();
                    }
                    else
                    {
                        func(control.Controls);
                    }
                }
            };
            func(Controls);
        }

        private void tbxFirstName_TextChanged(object sender, EventArgs e)
        {
            String firstName = tbxFirstName.Text;
        }

        private bool SetFirstName(string firstName)
        {
            if (!Regex.Match(firstName, "^[A-Z][a-zA-Z]*$").Success)
            {
                return true;
            }
            else
                return false;
        }

        private void GetFirstName(string FirstName)
        {
            //save first name to database
        }

        private void tbxLastName_TextChanged(object sender, EventArgs e)
        {
            String lastName = tbxLastName.Text;
        }

        private bool SetLastName(String lastName)
        {
            if (!Regex.Match(lastName, "^[A-Z][a-zA-Z]*$").Success)
            {
                return true;
            }
            else
                return false;
        }

        private void GetLastName(String lastName)
        {
            //save Last name to databse
        }

        private void mtbxPhonenumber_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {
            String phoneNumber = mtbxPhonenumber.Text;
        }

        private bool SetPhoneNumber(String phoneNumber)
        {
            try
            {
                if (Convert.ToInt32(phoneNumber) > -1)
                {
                    if (phoneNumber.Length == 10)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }

        private void GetPhoneNumber(String  phoneNumber)
        {
            //save phone number to database
        }

        private void mtbxDayOfPhoneNumber_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {
            String dayOfPhoneNumber = mtbxPhonenumber.Text;
        }
        private bool SetDayOfPhoneNumber(String dayOfPhoneNumber)
        {
            try
            {
                if (Convert.ToInt32(dayOfPhoneNumber) > -1)
                {
                    if (dayOfPhoneNumber.Length == 10)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }

        private void GetDayOfPhoneNumber(String dayOfPhoneNumber)
        {
            //save day of phone number to database
        }

        private void tbxEmail_TextChanged(object sender, EventArgs e)
        {
            String email = tbxEmail.Text;
        }

        private bool SetEmail(String email)
        {
            String mustHaveCharacters = "@" + ".";

            String checkemail = email;
            if (checkemail.Contains(mustHaveCharacters))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private void GetEmail(String email)
        {
            //Save email to databse
        }

        private void tbxProfession_TextChanged(object sender, EventArgs e)
        {
            String profession = tbxProfession.Text;
        }

        private bool SetProfession(String profession)
        {
            if (!Regex.Match(profession, "^[A-Z][a-zA-Z]*$").Success)
            {
                return true;
            }
            else
                return false;
        }

        private void GetProfession(string profession)
        {
            //save Profession to databse
        }

        private void tbxBio_TextChanged(object sender, EventArgs e)
        {
            String bio = tbxBio.Text;
        }

        private bool SetBio(String bio)
        {
            if (!Regex.Match(bio, "^[A-Z][a-zA-Z][0-9][ ]*$").Success)
            {
                return true;
            }
            else
                return false;
        }

        private void GetBio(String bio)
        {
            //save Bio to database
        }
    }
}
